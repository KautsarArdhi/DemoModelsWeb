

//////////////////////////////////////////////////////////////////////
// window.addEventListener('mousemove', (event) => {
//     mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
//     mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

//     moveModelToMousePosition();
// });

// function moveModelToMousePosition() {
//     // Use raycaster to project the mouse coordinates onto the 3D space
//     raycaster.setFromCamera(mouse, camera);

//     const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), -model.position.z); // Z-plane where model is located
//     const point = new THREE.Vector3();
//     raycaster.ray.intersectPlane(plane, point);

//     // Move the model to follow the mouse cursor
//     if (model) {
//         model.position.x = point.x;
//         model.position.y = point.y;
//     }
// }



// window.addEventListener('click', (event) => {
//     // Normalize the mouse coordinates (-1 to 1 range)
//     mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
//     mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

//     // Convert mouse coordinates to 3D space and move the model
//     moveModelToMousePosition();
// });

// function moveModelToMousePosition() {
//     // Use raycaster to project the mouse coordinates onto the 3D space
//     raycaster.setFromCamera(mouse, camera);

//     const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), -model.position.z); // Z-plane
//     const point = new THREE.Vector3();
//     raycaster.ray.intersectPlane(plane, point);

//     // Move the model to the mouse click position on the plane
//     model.position.x = point.x;
//     model.position.y = point.y;
// }



// function rotateModelLeft() {
//     if (model) {
//         model.rotation.y = Math.PI / 2; // Rotate 90 degrees left
//     }
// }

// function rotateModelRight() {
//     if (model) {
//         model.rotation.y = -Math.PI / 2; // Rotate 90 degrees right
//     }
// }




// import * as THREE from './three.js/build/three.module.js';
// import { GLTFLoader } from './three.js/examples/jsm/loaders/GLTFLoader.js'; 

// const scene = new THREE.Scene();
// const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

// const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('threeCanvas') });
// renderer.setSize(window.innerWidth, window.innerHeight);
// const ambientLight = new THREE.AmbientLight(0xffffff, 1);

// let model;

// const raycaster = new THREE.Raycaster();
// const mouse = new THREE.Vector2();

// const loader = new GLTFLoader();
// loader.load('./models/me.glb', function (gltf) {
//     model = gltf.scene;
//     model.scale.set(1.5, 1.5, 1.5); // Adjust scale
//     model.position.set(0, -2, 0); // Adjust position
//     scene.add(model);
//     animate();
// });

// // Lights for realism
// const light = new THREE.DirectionalLight(0xffffff, 1);
// light.position.set(5, 10, 7.5).normalize();
// scene.add(light);
// scene.add(ambientLight);

// camera.position.z = 4;

// // Smooth Scroll Camera Movement
// window.addEventListener('scroll', () => {
//     const scrollY = window.scrollY;
//     // camera.position.z = 5 + scrollY * 0.01; // Move camera based on scroll
// });

// // Mouse click event to rotate the model towards the click position
// window.addEventListener('click', (event) => {
//     mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
//     mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

//     rotateModelToMousePosition();
// });

// function rotateModelToMousePosition() {
//     raycaster.setFromCamera(mouse, camera);

//     const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), -model.position.z); // Z-plane where model is located
//     const point = new THREE.Vector3();
//     raycaster.ray.intersectPlane(plane, point);

//     if (model) {
//         // Calculate the direction the model should face
//         const direction = new THREE.Vector3().subVectors(point, model.position).normalize();
        
//         // Calculate the angle for the model to rotate in the Y axis (left/right)
//         const angle = Math.atan2(direction.x, direction.y);
        
//         // Apply the rotation (adjust axis if needed)
//         model.rotation.y = angle;
//     }
// }

// function animate() {
//     requestAnimationFrame(animate);
//     // if (model) { 
//     //     // model.rotation.y += 0.01; // Optional auto-rotation
//     // }
//     renderer.render(scene, camera);
// }

// // Handle Window Resize
// window.addEventListener('resize', () => {
//     const width = window.innerWidth;
//     const height = window.innerHeight;
//     renderer.setSize(width, height);
//     camera.aspect = width / height;
//     camera.updateProjectionMatrix();
// });

//////////////////////////////////////////////////////////////////////

.three-container {
    width: 120%; /* Reduce width to fit within half the page */
    height: 100vh;
    position: absolute;
    top: 0;
    right: 0;
}

canvas {
    
    width: 100%;
    height: 100%;
    display: block;
    position: absolute; /* Allow the 3D scene to overlay */
    top: 0;
    left: 0;
    z-index: 1; /* Ensure it's behind text */
    background-color: transparent; /* Transparent to show background */
    
    
}

